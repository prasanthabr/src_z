<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>Salesforce on prasanthabr</title>
    <link>https://netzap.in/categories/salesforce/</link>
    <description>Recent content in Salesforce on prasanthabr</description>
    <image>
      <title>Salesforce on prasanthabr</title>
      <link>https://netzap.in/categories/salesforce/</link>
      <url>https://source.unsplash.com/collection/983219/2000x1322</url>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo 0.83.1</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; prasanthabr. Licensed under CC-BY-SA-4.0.</copyright>
    <lastBuildDate>Sun, 15 May 2022 01:28:45 UT</lastBuildDate>
    <atom:link href="https://netzap.in/categories/salesforce/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using a Custom iterator on a Batch</title>
      <link>https://netzap.in/sf/custom-iterator/</link>
      <pubDate>Fri, 13 May 2022 22:49:09 UT</pubDate>
      <guid>https://netzap.in/sf/custom-iterator/</guid>
      <description>tl; dr: There are always creative ways to leverage tools; this mostly comes from experience. Custom Iterators take a bit to wrap your head around, but at its simplest, there is an Iterator and there is an Iterable. The Iterable feeds in the list that allows the iterator to pick out the next grouping.
Learnings
 The trick is to start with the iterating element; Eg: in a batch on a list of Accounts, the element is Account Creatively use constructors to help define behaviors in various situations Think about what the unit of processing is for you; if we are looking at working on a list as a unit, then the element should somehow contain that list Biggest learning, in a batch if you find it difficult to come from the detail and group, see if you cna come from the top and query in execute to group.</description>
      <category domain="https://netzap.in/categories/salesforce">Salesforce</category>
      <content:encoded><![CDATA[tl; dr: There are always creative ways to leverage tools; this mostly comes from experience. Custom Iterators take a bit to wrap your head around, but at its simplest, there is an Iterator and there is an Iterable. The Iterable feeds in the list that allows the iterator to pick out the next grouping.
Learnings
 The trick is to start with the iterating element; Eg: in a batch on a list of Accounts, the element is Account Creatively use constructors to help define behaviors in various situations Think about what the unit of processing is for you; if we are looking at working on a list as a unit, then the element should somehow contain that list Biggest learning, in a batch if you find it difficult to come from the detail and group, see if you cna come from the top and query in execute to group.  Background References The requirement was to identify failures in a row for each test type for collections across a date range, for a given entity.
This can be imagined as a three level problem. This means that the grouping has to occur at three levels. When building out the data from the lowest level, it means we would have to have a custom iterator and custom iteration to support the grouping.
public class ConsecutiveItemFailureBatch{ public class BusinessFinder implements Iterator&amp;lt;BusinessTestQuality&amp;gt;{//this is our iterator  Map&amp;lt;String, BusinessTestQuality&amp;gt; completeSet; String key; public boolean hasNext(){ return true; //&amp;lt;-- this is being mocked  } public BusinessTestQuality next(){ return new BusinessTestQuality(); //&amp;lt;-- this is being mocked  } } public class BusinessSet implements Iterable&amp;lt;BusinessTestQuality&amp;gt; { public Iterator&amp;lt;BusinessTestQuality&amp;gt; iterator(){ Map&amp;lt;String, BusinessTestQuality&amp;gt; completeSet; String key; for (Item_Quality__c mq : [Select id, Name, Collection_Pickup_Date__c, Test_Result_Numeric__c, Business_No__r.Id, DA_Consecutive_Test_Failure__c from Item_Quality__c where (Collection_Pickup_Date__c = LAST_N_DAYS:7 and (Name = :Test1 OR Name = :Test3)) OR (Name = :Test2 and Collection_Pickup_Date__c = LAST_N_DAYS:10) order by Collection_Pickup_Date__c asc]){ key = mq.Name &#43; &amp;#39;-&amp;#39; &#43; mq.Business_No__r.Id; if (completeSet.get(key) == null){ BusinessTestQuality ftq = new BusinessTestQuality(mq); completeSet.put(key,ftq); } else { completeSet.get(key).collect(mq); } } return new BusinessFinder(); //this needs to be replaced.  } } public class BusinessTestQuality{ // This is the stuff that is holding the grouping  List&amp;lt;Item_Quality__c&amp;gt; ItemQualities; String Business; String test; Integer count; //How do we create this bugger?  public BusinessTestQuality(){} public BusinessTestQuality(Item_Quality__c ItemQuality){ this.Business = ItemQuality.Business_No__c; this.test = ItemQuality.Name; //this may have to change to be the test itself. but this should suffice for now.  this.count = 1; this.ItemQualities.add(ItemQuality); } //we expect a Item quality every single time  public void collect(Item_Quality__c ItemQuality){ this.ItemQualities.add(ItemQuality); this.count&#43;&#43;; if(this.Business == null){ this.Business = ItemQuality.Business_No__c; this.test = ItemQuality.Name; } } } } ]]></content:encoded>
    </item>
    <item>
      <title>Future Methods</title>
      <link>https://netzap.in/sf/future-methods/</link>
      <pubDate>Sun, 17 Apr 2022 22:49:09 UT</pubDate>
      <guid>https://netzap.in/sf/future-methods/</guid>
      <description>This was a simple test to count the number of contacts associated with a given account.
The task was merely to create a class and not have a triggering mechanism.
Helped me update my understanding when the test was merely to call the class and method directly. I think the attempts at building go skills were helpful here.
Considerations in Future Methods Future methods can be thought similar to fire and forget actions.</description>
      <category domain="https://netzap.in/categories/salesforce">Salesforce</category>
      <content:encoded><![CDATA[This was a simple test to count the number of contacts associated with a given account.
The task was merely to create a class and not have a triggering mechanism.
Helped me update my understanding when the test was merely to call the class and method directly. I think the attempts at building go skills were helpful here.
Considerations in Future Methods Future methods can be thought similar to fire and forget actions.
These methods are self sufficient and contains all functions in the context of the future method.
 The method can accept only primitive data types
A. Does not accept sobjects The method is static &amp;ndash;&amp;gt; I think it means that there cannot be instances here, need to read and understand. The method does not return anything at all. In line with the idea of being self contained. The future method has a decorator called callout that can be used. I am yet to explore how that is different Testing future methods are interesting. Wrapping them in Test.Start() and Test.End() Also wrapped my head around calling the method directly to test it. Future methods do not follow the order in which they are triggered Future methods can run in parallel, which may cause row locking issues. While i have not explored this much, but this is where a queue patten makes sense to safely fail in case of row locking  Other things to look at  Objects that cannot be used together in DML Ops. This came about since this is a common use case for future methodshttps://developer.salesforce.com/docs/atlas.en-us.236.0.apexcode.meta/apexcode/apex_dml_non_mix_sobjects.htm In regards to the code/use case below; One of the approaches I had taken was to have a count() for the contacts. However, you cannot have a count() (is this called aggregate function) in a sub query  Class Code public with sharing class AccountProcessor { @future public static void countContacts(List&amp;lt;Id&amp;gt; accountids){ List&amp;lt;Account&amp;gt; accounts = new List&amp;lt;Account&amp;gt;([Select id, Number_Of_Contacts__c, (Select id from contacts) from account where id in :accountids]); for (Account x : accounts){ x.Number_Of_Contacts__c = 0; for (contact y: x.Contacts){ x.Number_Of_Contacts__c&#43;&#43;; } } update accounts; } } Test Class Code /* Test for the Account Processor class */ @isTest private class AccountProcessorTest { @IsTest static void contactAccount(){ Map&amp;lt;id, Account&amp;gt; testAccounts = new Map&amp;lt;id, Account&amp;gt;([Select id, Number_Of_Contacts__c from Account]); List&amp;lt;id&amp;gt; accids = new List&amp;lt;id&amp;gt;(testAccounts.keySet()); Test.startTest(); AccountProcessor.countContacts(accids); Test.stopTest(); Integer count = 0; for (Account acc : [Select id, Number_Of_Contacts__c from Account order by id asc]){ System.AssertEquals(acc.Number_Of_Contacts__c,count,count&#43;&amp;#39; is failing&amp;#39;); count&#43;&#43;; } } @TestSetup static void makeData(){ List&amp;lt;Account&amp;gt; testAcc = new List&amp;lt;Account&amp;gt;(); List&amp;lt;Contact&amp;gt; testCon = new List&amp;lt;contact&amp;gt;(); Integer count = 10; for (Integer i=0; i&amp;lt;count; i&#43;&#43;){ testAcc.add(new Account(Name = &amp;#39;TestAcc&amp;#39;&#43;i)); } insert testAcc; for (Integer x =0; x&amp;lt;count; x&#43;&#43;){ for (Integer y = 0; y &amp;lt; x; y&#43;&#43;){ testCon.add(new Contact(LastName=&amp;#39;LastName&amp;#39;&#43;x&#43;y,Email=&amp;#39;prasanthabr&#43;&amp;#39;&#43;x&#43;y&#43;&amp;#39;@gmail.com&amp;#39;,AccountId=testAcc[x].Id)); } } insert testCon; } } ]]></content:encoded>
    </item>
    <item>
      <title>Apex Intro</title>
      <link>https://netzap.in/sf/apex-intro/</link>
      <pubDate>Fri, 15 Apr 2022 02:10:47 UT</pubDate>
      <guid>https://netzap.in/sf/apex-intro/</guid>
      <description>This is a test</description>
      <category domain="https://netzap.in/categories/salesforce">Salesforce</category>
      <content:encoded><![CDATA[This is a test
]]></content:encoded>
    </item>
  </channel>
</rss>
